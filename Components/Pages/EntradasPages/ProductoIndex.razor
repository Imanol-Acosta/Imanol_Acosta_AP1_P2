@page "/Producto/Index"
@inject NavigationManager navigationManager
@rendermode InteractiveServer
@using Imanol_Acosta_AP1_P2.Models
@using Imanol_Acosta_AP1_P2.Services
@inject ProductoService productosService

<PageTitle>Productos</PageTitle>
<div class="container mt-3">
    <div class="card shadow-lg">
        <div class="card-header">
            <h5 class="text-center">Productos</h5>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-4">
                    <InputSelect class="form-select" @bind-Value="Filtro">
                        <option value="" selected disabled>Filtrar por</option>
                        <option value="ProductoID">ID</option>
                        <option value="Descripcion">Descripción</option>
                    </InputSelect>
                </div>

                <div class="col-5">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-primary" @onclick="Buscar">
                            <span class="bi bi-search"></span>
                        </button>
                    </div>
                </div>

                <div class="col-3 text-end">
                    <a href="/Productos/Create" class="btn btn-success">
                        <span class="bi bi-plus-square"></span> Crear
                    </a>
                </div>
            </div>

            @if (ListaProductos == null)
            {
                <p>Cargando productos...</p>
            }
            else
            {
                <table class="table table-hover">
                    <thead class="table table-striped text-black">
                        <tr>
                            <th>ID</th>
                            <th>Descripción</th>
                            <th>Peso (u)</th>
                            <th>Existencia</th>
                            <th>Compuesto</th>
                            <th>Editar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var producto in ListaProductos)
                        {
                            <tr>
                                <td>@producto.ProductoID</td>
                                <td>@producto.Descripcion</td>
                                <td>@producto.Peso.ToString("N2")</td>
                                <td>@producto.Existencia.ToString("N2")</td>
                                <td>@(producto.EsCompuesto ? "Sí" : "No")</td>
                                <td class="text-center">
                                    <a class="btn btn-outline-primary btn-sm me-2" href="/Productos/Edit/@producto.ProductoID" title="Editar">
                                        <span class="bi bi-pencil-square"></span>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>

        <div class="card-footer d-flex justify-content-between">
            <label>Conteo: @(ListaProductos?.Count ?? 0)</label>
            <label>Peso Total: @(ListaProductos?.Sum(p => p.Peso).ToString("N2") ?? "0.00") kg</label>
        </div>
    </div>
</div>

@code {
    public List<Producto>? ListaProductos { get; set; }
    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ListaProductos = await productosService.Listar(p => p.ProductoID > 0);
        }
        catch (Exception ex)
        {
            // Manejar error
            Console.WriteLine($"Error al cargar productos: {ex.Message}");
            ListaProductos = new List<Producto>();
        }
    }

    private async Task Buscar()
    {
        try
        {
            if (string.IsNullOrEmpty(Filtro) || string.IsNullOrWhiteSpace(ValorFiltro))
            {
                ListaProductos = await productosService.Listar(p => p.ProductoID > 0);
                return;
            }

            if (Filtro == "ProductoID" && int.TryParse(ValorFiltro, out int id))
            {
                ListaProductos = await productosService.Listar(p => p.ProductoID == id);
            }
            else if (Filtro == "Descripcion" && !string.IsNullOrWhiteSpace(ValorFiltro))
            {
                ListaProductos = await productosService.Listar(p => p.Descripcion.ToLower().Contains(ValorFiltro.ToLower()));
            }
            else
            {
                ListaProductos = await productosService.Listar(p => p.ProductoID > 0);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al buscar productos: {ex.Message}");
            ListaProductos = new List<Producto>();
        }
    }
}